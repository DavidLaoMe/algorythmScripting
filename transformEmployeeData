/*

Write a function called “transformEmployeeData” that transforms some employee data from one format to another.

The argument will look like this:

[
    [
        ['firstName', 'Joe'], ['lastName', 'Blow'], ['age', 42], ['role', 'clerk']
    ],
    [
        ['firstName', 'Mary'], ['lastName', 'Jenkins'], ['age', 36], ['role', 'manager']
    ]
]
Given that input, the return value should look like this:

[
    {firstName: 'Joe', lastName: 'Blow', age: 42, role: 'clerk'},
    {firstName: 'Mary', lastName: 'Jenkins', age: 36, role: 'manager'}
]
Note that the input may have a different number of rows or different keys than the given sample.

For example, let’s say the HR department adds a “tshirtSize” field to each employee record.
Your code should flexibly accommodate that.

*/

function transformEmployeeData(employeeData) {
  // [ [ [ ArrayofArrays ] ],[ [ ArrayofArrays ] ] ]
  // -> [ {obj with key value pairs}, {obj with key value pairs}]
  
  let newArray = [];
  for (let i = 0; i < employeeData.length; i++){
    console.log(employeeData[i]);
    newArray.push(keyValuePairs(employeeData[i]));
    console.log(newArray);
  }
  return newArray;
}

function keyValuePairs(arrayOfArrays){
  let obj = {};
  for (let j = 0; j < arrayOfArrays.length; j++){
    obj[arrayOfArrays[j][0]] = arrayOfArrays[j][1];
  }
  return obj;
}

let orgData = [
    [
        ['firstName', 'Joe'], ['lastName', 'Blow'], ['age', 42], ['role', 'clerk']
    ],
    [
        ['firstName', 'Mary'], ['lastName', 'Jenkins'], ['age', 36], ['role', 'manager']
    ]
];

console.log(transformEmployeeData(orgData));

/*

Another method with Reduce:

function transformEmployeeData(employeeData) {
  return employeeData.reduce((acc, next) => {
    var dataObj = {};
    next.reduce((acc1, next2) => {
      dataObj[next2[0]] = next2[1];
    }, {});
    acc.push(dataObj);
      return acc;
  }, [])
}
*/
